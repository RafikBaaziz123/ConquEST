package conquest.world;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import conquest.building.Town;
import prof.jogos2D.image.*;

/**
 * A team in the game.
 * Each team has a set of buildings and its own characteristics as
 * its soldier speed, attack and defense power, regeneration rate, etc
 */
public class Team {

	// Maximum values for each characteristic so the bonuses don't 
	// accumulate too much
	public static final int MAX_POWER = 20;
	public static final int MAX_SPEED = 15;
	public static final int MAX_REGENERATION = 10;
	public static final int MAX_POP_EXTRA = 10;

	private String name;      // name of the team
	private boolean neutral;  // is it a neutral team?
	
	// TODO support all building types
	// list with all towns the team owns
	private ArrayList<Town> towns = new ArrayList<Town>();	
	
	// graphical elements
	private ComponenteVisual flag;            // team flag
	private ComponenteVisual soldier;         // team soldier
	
	// the teams characteristics
	private int baseFood = 30;                // base food generated by the team
	private int attack, attackExtra;          // attack power of their soldiers (base and extras)
	private int defense, defenseExtra;        // defense power of the buildings (base and extras) 
	private int speed, speedExtra;            // speed of the soldiers 
	private int regenerationRate, regenExtra; // how many cycles it takes to grow the population 
	private int excessPop, excessPopExtra;    // excess population allowed beyond the building limit
	private int foodAvailable;			      // available food
	private int foodRequired;                 // food required to grow the population
	private int population;                   // current team population
	
	/**
	 * Creates a team
	 * @param name team name
	 * @param attack attack power of the soldiers
	 * @param defense defense power of the buildings
	 * @param speed speed of the soldiers
	 * @param regenRate number of cycles betwee regenerations
	 * @param maxPopExtra extra population allowed above the building limits
	 */
	public Team( String name, int attack, int defense, int speed, int regenRate, int maxPopExtra ){
		this.name = name;
		// load flag and soldiers images
		try {
			String dataDir = "data/civs/"+name+"/";
			flag = new ComponenteSimples(dataDir + "bandeira.gif");
			soldier = new ComponenteMultiAnimado( null, dataDir + "soldado.gif", 2, 4, 8 );
		} catch (IOException e) {
		}
		if( name.equals("Neutral") )
			neutral = true;
		
		this.attack = attack;
		this.defense = defense;
		this.speed = speed;
		this.regenerationRate = regenRate;
		this.excessPop = maxPopExtra;
	}
	
	/** starts the turn, i.e., calculates the food produced and manages the population
	 */
	public void startTurn() {
		if( neutral )
			return;
		
		regeneratePopulation();

		// prepare for the next turn
		attackExtra = 0;
		defenseExtra = 0;
		speedExtra = 0;
		excessPopExtra = 0;
		regenExtra = 0;
		// TODO support all building types
		for( Town v : towns )
			v.startTurn();
	}

	/** regenerates the team population, calculating the required food
	 */
	private void regeneratePopulation() {
		// calculate the existing food and the food requirements (including growth)
		// and update the population
		population = 0;
		foodAvailable = baseFood;
		foodRequired = 0;
		// TODO support all building types
		for( Town v : towns ) {
			foodAvailable += v.getFoodOutput();
			foodRequired += v.howMuchGrowth();
			population += v.getPopulation();
		}

		// we also need to support the current population
		foodRequired += population;
		
		// if there is enough food, all get what they want
		if( foodAvailable > foodRequired ) { 
			// TODO support all building types
			for( Town v : towns )
				v.regeneratePop( (int)(v.howMuchGrowth() ) );
		}
		// if food is below the requirements, population is reduced by 1 in each building
		else if( foodAvailable < population){
			// TODO support all building types
			for( Town v : towns )
				v.regeneratePop( -1 );
		}
		// There is enough food but not enough for everybody to grow
		// so we follow the request order, but each building only gets 1 population
		else {
			int foodRemaining = foodAvailable - population;
			// TODO support all building types
			for( Town v : towns ) {
				if( v.howMuchGrowth() > 0 ) {
					v.regeneratePop( 1 );
					foodRemaining--;
					// no more food? Stop growth 
					if( foodRemaining == 0 )
						break;
				}
			}
		}
	}


	/** Returns the name of the team
	 *  @return the name of the team
	 */
	public String getName() {
		return name;
	}

	/** Changes the name of the team
	 * @param name new name
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * Returns the number of towns owned by the team 
	 * @return the number of towns owned by the team
	 */
	public int  getTownCount(){
		// TODO support all building types
		return towns.size();
	}

	/** Returns a list with all towns owned by the team
	 * @return a list with all towns owned by the team
	 */
	public List<Town> getTowns() {
		// TODO support all building types
		return Collections.unmodifiableList( towns );
	}
	
	/** adds a town
	 * @param t town to add
	 */
	public void addTown( Town t ){
		// TODO support all building types
		towns.add( t );
	}
	
	/** removes a town
	 * @param t town to remove
	 */
	public void removeTown( Town t ){
		// TODO support all building types
		towns.remove( t );
	}
	
	/** Returns the flag image
	 * @return the flag image
	 */
	public ComponenteVisual getFlag(){
		return flag;
	}
	
	/** Checks if it is a neutral team
	 * @return true is its neutral
	 */
	public boolean isNeutral() {
		return neutral;
	}

	/** Returns the attack power
	 * @return the attack power
	 */
	public int getAttack() {
		return attack + attackExtra;
	}

	/** Returns the defense power
	 * @return the defense power
	 */
	public int getDefense() {
		return defense + defenseExtra;
	}

	/** Returns the soldier image
	 * @return the soldier image
	 */
	public ComponenteVisual getSoldier() {
		return soldier;
	}

	/** Return soldier speed
	 * @return the soldier speed
	 */
	public int getSpeed() {
		return speed + speedExtra;
	}

	/** Returns the regeneration rate
	 * @return the regeneration rate
	 */
	public int getRegenerationRate() {
		return regenerationRate - regenExtra;
	}
	
	/** Adds/subtracts to the regeneration rate  
	 * @param factor value to add/subtract to the regeneration rate
	 */
	public void addRegeneration( int factor ){
		regenExtra += factor;
		if( regenExtra > MAX_REGENERATION )
			regenExtra = MAX_REGENERATION;
	}
	
	/** Adds/subtracts to the defense power
	 * @param d valor to add/subtract to the defense power
	 */
	public void addExtraDefense(int d) {
		defenseExtra += d;
		if( defenseExtra > MAX_POWER )
			defenseExtra = MAX_POWER;
	}

	/** Adds/subtracts to the attack power
	 * @param a value to add/subtract
	 */
	public void addExtraAttack(int a) {
		attackExtra += a;
		if( attackExtra > MAX_POWER )
			attackExtra = MAX_POWER;
	}
	
	/** Returns the extra population that the teams allows over the building limit  
	 * @return the extra population that the teams allows over the building limit
	 */
	public int getMaxPopExtra() {
		return excessPop + excessPopExtra;
	}
	
	/** adds/Subtracts to the extra population 
	 * @param factor value to add/subtract
	 */
	public void addMaxPopExtra( int factor ){
		excessPopExtra += factor;
		if( excessPopExtra > MAX_POP_EXTRA )
			excessPopExtra = MAX_POP_EXTRA;
	}

	/** Returns available food
	 * @return available food
	 */
	public int getAvailableFood() {
		return foodAvailable;
	}

	/** Returns the team population. <br>
	 * The team's population does not take into account
	 * the soldiers in the armies, just the buildings inhabitants
	 * @return the team population
	 */
	public int getPopulation() {
		return population;
	}
}
